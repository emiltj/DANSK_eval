coul <- brewer.pal(4, "PuOr")
coul <- colorRampPalette(coul)(25)
# Plot
ggplot(df, aes(fill=rowname, y=value, x=rowname)) +
# Geom_bar
geom_bar(position = position_dodge(width = .8),
width=.7,
stat="identity",
colour="black") +
# Add text with F1-scores
geom_text(aes(label=round(value, 2)), hjust=1.6, color="black", size=4.5, position = position_dodge(0.8)) +
scale_fill_brewer(palette = coul) +
# Set theme
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="none") +
coord_flip() +
# Let x-axis dodge to avoid clutter
#scale_x_discrete(guide = guide_axis(n.dodge=2)) +
# Set labs
labs(title = "F1-scores",
subtitle = "F1-performance of Danish SOTA models",
x = "Model",
y = "F1-score")
# Load data
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
# Keep only the across domains
df <- df %>% select(c("rowname"="Model", "value"="across_domains"))
# Factor by right order
df$rowname <- fct_rev(factor(df$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained", "saattrupdan/nbailab-base-ner-scandi", "da_dacy_large_trf", "da_dacy_medium_trf", "da_dacy_small_trf", "da_core_news_lg", "da_core_news_md","da_core_news_sm")))
palette_blues <- colorRampPalette(colors = c("white", "#004b88"))(12)
# Plot
ggplot(df, aes(fill=rowname, y=value, x=rowname)) +
# Geom_bar
geom_bar(position = position_dodge(width = .8),
width=.7,
stat="identity",
colour="black") +
# Add text with F1-scores
geom_text(aes(label=round(value, 2)), hjust=1.6, color="black", size=4.5, position = position_dodge(0.8)) +
scale_fill_brewer(palette = palette_blues) +
# Set theme
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="none") +
coord_flip() +
# Let x-axis dodge to avoid clutter
#scale_x_discrete(guide = guide_axis(n.dodge=2)) +
# Set labs
labs(title = "F1-scores",
subtitle = "F1-performance of Danish SOTA models",
x = "Model",
y = "F1-score")
# Load data
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
# Keep only the across domains
df <- df %>% select(c("rowname"="Model", "value"="across_domains"))
# Factor by right order
df$rowname <- fct_rev(factor(df$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained", "saattrupdan/nbailab-base-ner-scandi", "da_dacy_large_trf", "da_dacy_medium_trf", "da_dacy_small_trf", "da_core_news_lg", "da_core_news_md","da_core_news_sm")))
palette_blues <- colorRampPalette(colors = c("white", "#004b88"))(12)
# Plot
ggplot(df, aes(fill=rowname, y=value, x=rowname)) +
# Geom_bar
geom_bar(position = position_dodge(width = .8),
width=.7,
stat="identity",
colour="black") +
# Add text with F1-scores
geom_text(aes(label=round(value, 2)), hjust=1.6, color="black", size=4.5, position = position_dodge(0.8)) +
scale_fill_brewer(palette = palette_blues) +
# Set theme
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="none") +
coord_flip() +
# Let x-axis dodge to avoid clutter
#scale_x_discrete(guide = guide_axis(n.dodge=2)) +
# Set labs
labs(title = "F1-scores",
subtitle = "F1-performance of Danish SOTA models",
x = "Model",
y = "F1-score")
# Load data
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
# Keep only the across domains
df <- df %>% select(c("rowname"="Model", "value"="across_domains"))
# Factor by right order
df$rowname <- fct_rev(factor(df$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained", "saattrupdan/nbailab-base-ner-scandi", "da_dacy_large_trf", "da_dacy_medium_trf", "da_dacy_small_trf", "da_core_news_lg", "da_core_news_md","da_core_news_sm")))
palette_blues <- colorRampPalette(colors = c("white", "#004b88"))(12)
# Plot
ggplot(df, aes(fill=rowname, y=value, x=rowname)) +
# Geom_bar
geom_bar(position = position_dodge(width = .8),
width=.7,
stat="identity",
colour="black") +
# Add text with F1-scores
geom_text(aes(label=round(value, 2)), hjust=1.6, color="black", size=4.5, position = position_dodge(0.8)) +
scale_fill_brewer(palette = "palette_blues") +
# Set theme
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="none") +
coord_flip() +
# Let x-axis dodge to avoid clutter
#scale_x_discrete(guide = guide_axis(n.dodge=2)) +
# Set labs
labs(title = "F1-scores",
subtitle = "F1-performance of Danish SOTA models",
x = "Model",
y = "F1-score")
palette_blues
palette_blues <- colorRampPalette(colors = c("white", "#004b88"))(20)
palette_blues
# Plot
ggplot(df, aes(fill=rowname, y=value, x=rowname)) +
# Geom_bar
geom_bar(position = position_dodge(width = .8),
width=.7,
stat="identity",
colour="black") +
# Add text with F1-scores
geom_text(aes(label=round(value, 2)), hjust=1.6, color="black", size=4.5, position = position_dodge(0.8)) +
scale_fill_brewer(palette = "palette_blues") +
# Set theme
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="none") +
coord_flip() +
# Let x-axis dodge to avoid clutter
#scale_x_discrete(guide = guide_axis(n.dodge=2)) +
# Set labs
labs(title = "F1-scores",
subtitle = "F1-performance of Danish SOTA models",
x = "Model",
y = "F1-score")
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "feasts", "forcats", "forecast", "fracdiff", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "lubridate", "markdown", "modelr", "openssl", "pillar", "processx", "progressr", "ps", "purrr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "sass", "slider", "stringi", "stringr", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tseries", "tsibble", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages(c("boot", "class", "codetools", "foreign", "MASS", "Matrix", "mgcv", "nlme", "spatial", "survival"), lib="/opt/homebrew/Cellar/r/4.2.2/lib/R/library")
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "feasts", "forcats", "forecast", "fracdiff", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "lubridate", "markdown", "modelr", "openssl", "pillar", "processx", "progressr", "ps", "purrr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "sass", "slider", "stringi", "stringr", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tseries", "tsibble", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "feasts", "forcats", "forecast", "fracdiff", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "lubridate", "markdown", "modelr", "openssl", "pillar", "processx", "progressr", "ps", "purrr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "sass", "slider", "stringi", "stringr", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tseries", "tsibble", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
install.packages(c("BH", "bit", "blob", "broom", "bslib", "cachem", "cli", "colorspace", "commonmark", "cpp11", "curl", "data.table", "dbplyr", "digest", "distributional", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "feasts", "forcats", "forecast", "fracdiff", "fs", "gargle", "ggplot2", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "httr", "isoband", "jsonlite", "knitr", "lifecycle", "lubridate", "markdown", "modelr", "openssl", "pillar", "processx", "progressr", "ps", "purrr", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "sass", "slider", "stringi", "stringr", "sys", "tibble", "tidyr", "tidyselect", "tidyverse", "timeDate", "tinytex", "tseries", "tsibble", "utf8", "vctrs", "vroom", "xfun", "xts", "yaml"))
palette_blues <- colorRampPalette(colors = c("white", "#004b88"))(20)
palette_blues
# Plot
ggplot(df, aes(fill=rowname, y=value, x=rowname)) +
# Geom_bar
geom_bar(position = position_dodge(width = .8),
width=.7,
stat="identity",
colour="black") +
# Add text with F1-scores
geom_text(aes(label=round(value, 2)), hjust=1.6, color="black", size=4.5, position = position_dodge(0.8)) +
scale_fill_brewer(palette = "palette_blues") +
# Set theme
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="none") +
coord_flip() +
# Let x-axis dodge to avoid clutter
#scale_x_discrete(guide = guide_axis(n.dodge=2)) +
# Set labs
labs(title = "F1-scores",
subtitle = "F1-performance of Danish SOTA models",
x = "Model",
y = "F1-score")
# LOAD PACKAGES
```{r}
library("pacman")
pacman::p_load(ggplot2, tidyverse, corrr, RColorBrewer)
# Load dataset
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/tag_f1_wide.csv", header=T)
# Set model values as rownames
df <- df %>% column_to_rownames(., var = 'Model')
# Make into long format
df_wide <- df %>%
rownames_to_column() %>%
gather(colname, value, -rowname)
pacman::p_load(ggplot2, tidyverse, corrr, RColorBrewer)
library("ggplot2")
library("pacman")
pacman::p_load(ggplot2, tidyverse, corrr, RColorBrewer)
library("pacman")
pacman::p_load(ggplot2, tidyverse, corrr, RColorBrewer)
# Tag
# Load dataset
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/ner_models_performance/tag_f1_wide.csv", header=T)
df
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
train = train[,order(colnames(train))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books", "X")
colnames(train) = new_col_names
train <- train[, c(9, 1, 2, 3, 4, 5, 6, 7, 8)]
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df
df
df
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df
df <- df[c(1, 2, 3, 10, 4, 5, 6, 7, 8, 9),]
df
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
df
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df
df <- df %>% column_to_rownames(., var = 'Model')
library("pacman")
library("ggplot2")
library("tidyverse")
library("RColorBrewer")
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df <- df[c(1, 2, 3, 10, 4, 5, 6, 7, 8, 9),]
df
round(df, 2)
df =round(df, 3)
df = round(df, 3)
df
df_wide$rowname <- factor(df_wide$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained", "saattrupdan/nbailab-base-ner-scandi", "da_dacy_large_trf", "da_dacy_medium_trf", "da_dacy_small_trf", "da_core_news_lg", "da_core_news_md","da_core_news_sm"))
df
write.csv(df, "/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/SOTA/domain.csv")
# Tag
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/tag_f1_wide.csv", header=T)
df
# Tag
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/tag_f1_wide.csv", header=T)
df
df <- df %>% column_to_rownames(., var = 'Model')
df
df
df = df[,order(colnames(df))]
df
df = round(df, 3)
df
write.csv(df, "/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/SOTA/tag.csv")
# Domain
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/ner_models_performance/domain_f1_long.csv", header=T)
df
df <- df %>% column_to_rownames(., var = 'X')
df
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df <- df[c(1, 2, 3, 10, 4, 5, 6, 7, 8, 9),]
df = round(df, 3)
df
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df <- df[c(1, 2, 3, 10, 4, 5, 6, 7, 8, 9),]
df = round(df, 3)
# Domain
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/ner_models_performance/domain_f1_long.csv", header=T)
df
df <- df %>% column_to_rownames(., var = 'X')
# Domain
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/ner_models_performance/domain_f1_wide.csv", header=T)
df
df <- df %>% column_to_rownames(., var = 'X')
df <- df %>% column_to_rownames(., var = 'Model')
df
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df
# Domain (including across domains)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/domain_f1_long.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df
df <- df[c(1, 2, 3, 10, 4, 5, 6, 7, 8, 9),]
df
# Domain
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/ner_models_performance/domain_f1_wide.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books")
colnames(df) = new_col_names
df
df = round(df, 3)
write.csv(df, "/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/NER/domain.csv")
# Tag
# Load dataset
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/ner_models_performance/tag_f1_wide.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
df = round(df, 3)
df
df = round(df, 3)
df = df  %>% select(!Domain)
df
df = round(df, 3)
df
colnames(df)[18] = "WORK OF ART"
df
write.csv(df, "/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/NER/tag.csv")
# Tag
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/other_models_performance/tag_f1_wide.csv", header=T)
df <- df %>% column_to_rownames(., var = 'Model')
df = df[,order(colnames(df))]
df = round(df, 3)
df
dev = read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/DANSK_descriptive/dev/domain_desc_stats_wide.csv")
dev = train[,order(colnames(dev))]
dev = read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/DANSK_descriptive/dev/domain_desc_stats_wide.csv")
dev = dev[,order(colnames(dev))]
new_col_names = c("All domains combined", "Conversation", "Dannet", "Legal", "News", "Social Media", "Web", "Wiki and Books", "X")
colnames(dev) = new_col_names
dev <- dev[, c(9, 1, 2, 3, 4, 5, 6, 7, 8)]
write.csv(dev, "/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/DANSK/dev.csv")
# Load data
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/NER/f1_recall_precision.csv", header=T)
df
# Set model values as rownames
df <- df %>% column_to_rownames(., var = 'Model')
df
# Set model values as rownames
df <- df %>% column_to_rownames(., var = 'Model')
df
# Load data
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/NER/f1_recall_precision.csv", header=T)
# Set model values as rownames
df <- df %>% column_to_rownames(., var = 'Model')
df
# Make into long format
df_wide <- df %>%
rownames_to_column() %>%
gather(colname, value, -rowname)
# Order by custom ordering:
df_wide$rowname <- factor(df_wide$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained"))
df_wide$rowname <- fct_rev(df_wide$rowname)
df_wide
# Plot
ggplot(df_wide, aes(y=value, x=rowname)) +
# Geom_bar
geom_point(size = 3.5,
aes(color=colname),
stat="identity") +
geom_point(shape=1, size=3.5, colour="black")+
scale_color_brewer(palette = "Set2") +
coord_flip() +
# theme_minimal() +
# Set labs
labs(title = "F1-scores across domains",
subtitle = "F1-performance of the NER fine-grained models",
x = "Model",
y = "F1-score",
color = 'Domain')
# Plot
ggplot(df_wide, aes(y=value, x=rowname)) +
# Geom_bar
geom_point(size = 3.5,
aes(color=colname),
stat="identity") +
geom_point(shape=1, size=3.5, colour="black")+
scale_color_brewer(palette = "Set2") +
coord_flip() +
# theme_minimal() +
# Set labs
labs(title = "Performance",
subtitle = "F1, recall and precision scores of the NER fine-grained models",
x = "Model",
y = "Score",
color = 'Metric')
# Plot
ggplot(df_wide, aes(y=value, x=rowname)) +
# Geom_bar
geom_point(size = 3.5,
aes(color=colname),
stat="identity") +
geom_point(shape=1, size=3.5, colour="black")+
scale_color_brewer(palette = "Set2") +
coord_flip() +
# theme_minimal() +
# Set labs
labs(title = "Performance",
subtitle = "F1 recall and precision scores of the NER fine-grained models",
x = "Model",
y = "Score",
color = 'Metric')
# Plot
ggplot(df_wide, aes(y=value, x=rowname)) +
# Geom_bar
geom_point(size = 3.5,
aes(color=colname),
stat="identity") +
geom_point(shape=1, size=3.5, colour="black")+
scale_color_brewer(palette = "Set2") +
coord_flip() +
# theme_minimal() +
# Set labs
labs(title = "Performance",
subtitle = "F1, recall and precision scores of the NER fine-grained models",
x = "Model",
y = "Score",
color = 'Metric')
# Save plot
ggsave("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/NER/f1_recall_precision.png")
# Load data
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/NER/f1_recall_precision.csv", header=T)
# Set model values as rownames
df <- df %>% column_to_rownames(., var = 'Model')
# Make into long format
df_wide <- df %>%
rownames_to_column() %>%
gather(colname, value, -rowname)
# Order by custom ordering:
df_wide$rowname <- factor(df_wide$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained"))
df_wide$rowname <- fct_rev(df_wide$rowname)
# Plot
ggplot(df_wide, aes(y=value, x=rowname)) +
# Geom_bar
geom_point(size = 3.5,
aes(color=colname),
stat="identity") +
geom_point(shape=1, size=3.5, colour="black")+
scale_color_brewer(palette = "Set2") +
coord_flip() +
# theme_minimal() +
# Set labs
labs(title = "Performance",
subtitle = "F1, recall and precision scores of the NER fine-grained models",
x = "Model",
y = "Score",
color = 'Metric')
# Save plot
ggsave("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/NER/f1_recall_precision.png")
rownames(df)
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/SOTA/f1_recall_precision.csv", header=T)
# Set model values as rownames
df <- df %>% column_to_rownames(., var = 'Model')
rownames(df)
# Order by custom ordering:
df_wide$rowname <- factor(df_wide$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained", "saattrupdan/nbailab-base-ner-scandi", "da_dacy_large_trf",                   "da_dacy_medium_trf", "da_dacy_small_trf", "da_core_news_lg", "da_core_news_md", "da_core_news_sm"))
df_wide$rowname <- fct_rev(df_wide$rowname)
# Plot
ggplot(df_wide, aes(y=value, x=rowname)) +
# Geom_bar
geom_point(size = 3.5,
aes(color=colname),
stat="identity") +
geom_point(shape=1, size=3.5, colour="black")+
scale_color_brewer(palette = "Set2") +
coord_flip() +
# theme_minimal() +
# Set labs
labs(title = "Performance",
subtitle = "F1, recall and precision scores of Danish SOTA models",
x = "Model",
y = "Score",
color = 'Metric')
df <- read.csv("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/SOTA/f1_recall_precision.csv", header=T)
# Set model values as rownames
df <- df %>% column_to_rownames(., var = 'Model')
rownames(df)
# Make into long format
df_wide <- df %>%
rownames_to_column() %>%
gather(colname, value, -rowname)
df_wide
# Order by custom ordering:
df_wide$rowname <- factor(df_wide$rowname, levels=c("da_dacy_large_ner_fine_grained", "da_dacy_medium_ner_fine_grained", "da_dacy_small_ner_fine_grained", "saattrupdan/nbailab-base-ner-scandi", "da_dacy_large_trf",                   "da_dacy_medium_trf", "da_dacy_small_trf", "da_core_news_lg", "da_core_news_md", "da_core_news_sm"))
df_wide$rowname <- fct_rev(df_wide$rowname)
df_wide
# Plot
ggplot(df_wide, aes(y=value, x=rowname)) +
# Geom_bar
geom_point(size = 3.5,
aes(color=colname),
stat="identity") +
geom_point(shape=1, size=3.5, colour="black")+
scale_color_brewer(palette = "Set2") +
coord_flip() +
# theme_minimal() +
# Set labs
labs(title = "Performance",
subtitle = "F1, recall and precision scores of Danish SOTA models",
x = "Model",
y = "Score",
color = 'Metric')
# Save plot
ggsave("/Users/emiltrencknerjessen/Desktop/priv/DANSK_eval/output/Thesis/SOTA/f1_recall_precision.png")
